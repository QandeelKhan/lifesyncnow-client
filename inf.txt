Open the terminal.
also create a PAT personal access token from the settings of the account
Type the following command to set your username in Git:

python

git config --global user.name "Your_Username"

Type the following command to set your email in Git:

python

git config --global user.email "your_email@example.com"

To verify the configuration, type:

lua

git config --global user.name

and

lua

    git config --global user.email

This sets up Git to use the same username and email for all your projects. You can change the configuration for a specific project by using the git config command without the --global flag.

-----
svgr example: npx @svgr/cli -- src/components/icons/UserIcon.svg
execute python3 script: python3 ./<filename>.py




about project
we added the object ("browser": {
    "fs": false,
    "path": false,
    "os": false
})  
to the package.json, to fix typescript v5 while importing fs(file system module) else downgrade to v4 until not fixed in v5

# ---react-helmet---
# increase seo, by dynamically changing the meta and title tag according to the page
# Install the library: npm install react-helmet
# Import the Helmet component in the React component where you want to manage the HTML head information:

-------

Yes, you can store your GitHub username and personal access token as environment variables in your system, and then reference them in your commands. This way, you don't have to type your credentials every time you want to use the GitHub API.

Here's an example using cURL:

    First, you'll need to generate a personal access token from the GitHub Developer Settings.

    Then, add the following lines to your shell profile file (e.g. ~/.bashrc or ~/.zshrc) and replace <username> with your GitHub username and <token> with your personal access token:

javascript

export GH_USERNAME=<username>
export GH_TOKEN=<token>

    Restart your terminal or run the following command to reload your profile:

bash

source ~/.bashrc

    Now, you can create a repository by running the following command, replacing <repo_name> with the name of your repository:

bash cmd to create a repository on github

curl -u $GH_USERNAME:$GH_TOKEN https://api.github.com/user/repos -d '{"name":"<repo_name>"}'

This will use the environment variables to access your GitHub credentials, so you don't have to type them every time.
# ---------To push changes from the main branch to the backup branch, 
you need to checkout the backup branch and merge the changes from the main branch into it. 
Here's the steps to do that in the terminal:

    Checkout the main branch: git checkout main
    Fetch the latest changes from the remote repository: git fetch
    Merge the changes from the main branch into the backup branch: git checkout backup-branch && git merge main
    Push the changes to the remote repository: git push

Note: Replace main and backup-branch with the actual names of your branches.